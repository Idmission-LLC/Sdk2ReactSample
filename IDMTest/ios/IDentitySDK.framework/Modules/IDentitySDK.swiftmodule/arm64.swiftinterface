// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name IDentitySDK
import AVFoundation
import Accelerate
import CoreGraphics
import CoreMedia
import Foundation
import GZIP
@_exported import IDentitySDK
import MLKitFaceDetection
import MLKitImageLabeling
import MLKitVision
import Swift
import TensorFlowLite
import TensorFlowLiteTaskText
import UIKit
import Vision
import ZXingObjC
public struct QKMRZResult {
  public let documentType: Swift.String
  public let countryCode: Swift.String
  public let surnames: Swift.String
  public let givenNames: Swift.String
  public let documentNumber: Swift.String
  public let nationalityCountryCode: Swift.String
  public let birthdate: Foundation.Date?
  public let sex: Swift.String?
  public let expiryDate: Foundation.Date?
  public let personalNumber: Swift.String
  public let personalNumber2: Swift.String?
  public let isDocumentNumberValid: Swift.Bool
  public let isBirthdateValid: Swift.Bool
  public let isExpiryDateValid: Swift.Bool
  public let isPersonalNumberValid: Swift.Bool?
  public let allCheckDigitsValid: Swift.Bool
}
public struct BiometricLiveCheckData : Swift.Encodable {
  public var selfie: Swift.String
  public init(selfie: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AdditionalCustomerWFlagCommonData : Swift.Encodable {
  public enum ManualReviewRequired : Swift.String, Swift.Encodable {
    case yes
    case no
    case forced
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum BypassAgeValidation : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DeDuplicationRequired : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum BypassNameMatching : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum PostDataAPIRequired : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum SendInputImagesInPost : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum SendProcessedImagesInPost : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum NeedImmediateResponse : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DeduplicationSynchronous : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum VerifyDataWithHost : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum IdBackImageRequired : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum StripSpecialCharacters : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var uniqueRequestId: Swift.String
  public var manualReviewRequired: IDentitySDK.AdditionalCustomerWFlagCommonData.ManualReviewRequired?
  public var bypassAgeValidation: IDentitySDK.AdditionalCustomerWFlagCommonData.BypassAgeValidation?
  public var deDuplicationRequired: IDentitySDK.AdditionalCustomerWFlagCommonData.DeDuplicationRequired?
  public var bypassNameMatching: IDentitySDK.AdditionalCustomerWFlagCommonData.BypassNameMatching?
  public var postDataAPIRequired: IDentitySDK.AdditionalCustomerWFlagCommonData.PostDataAPIRequired?
  public var sendInputImagesInPost: IDentitySDK.AdditionalCustomerWFlagCommonData.SendInputImagesInPost?
  public var sendProcessedImagesInPost: IDentitySDK.AdditionalCustomerWFlagCommonData.SendProcessedImagesInPost?
  public var needImmediateResponse: IDentitySDK.AdditionalCustomerWFlagCommonData.NeedImmediateResponse?
  public var deduplicationSynchronous: IDentitySDK.AdditionalCustomerWFlagCommonData.DeduplicationSynchronous?
  public var verifyDataWithHost: IDentitySDK.AdditionalCustomerWFlagCommonData.VerifyDataWithHost?
  public var idBackImageRequired: IDentitySDK.AdditionalCustomerWFlagCommonData.IdBackImageRequired?
  public var stripSpecialCharacters: IDentitySDK.AdditionalCustomerWFlagCommonData.StripSpecialCharacters?
  public var metadata: IDentitySDK.Metadata?
  public var ocrMetadata: IDentitySDK.OcrMetadata?
  public init(uniqueRequestId: Swift.String = UUID().uuidString, manualReviewRequired: IDentitySDK.AdditionalCustomerWFlagCommonData.ManualReviewRequired? = .no, bypassAgeValidation: IDentitySDK.AdditionalCustomerWFlagCommonData.BypassAgeValidation? = .no, deDuplicationRequired: IDentitySDK.AdditionalCustomerWFlagCommonData.DeDuplicationRequired? = .no, bypassNameMatching: IDentitySDK.AdditionalCustomerWFlagCommonData.BypassNameMatching? = .yes, postDataAPIRequired: IDentitySDK.AdditionalCustomerWFlagCommonData.PostDataAPIRequired? = .no, sendInputImagesInPost: IDentitySDK.AdditionalCustomerWFlagCommonData.SendInputImagesInPost? = .no, sendProcessedImagesInPost: IDentitySDK.AdditionalCustomerWFlagCommonData.SendProcessedImagesInPost? = .no, needImmediateResponse: IDentitySDK.AdditionalCustomerWFlagCommonData.NeedImmediateResponse? = .no, deduplicationSynchronous: IDentitySDK.AdditionalCustomerWFlagCommonData.DeduplicationSynchronous? = .no, verifyDataWithHost: IDentitySDK.AdditionalCustomerWFlagCommonData.VerifyDataWithHost? = .no, idBackImageRequired: IDentitySDK.AdditionalCustomerWFlagCommonData.IdBackImageRequired? = .yes, stripSpecialCharacters: IDentitySDK.AdditionalCustomerWFlagCommonData.StripSpecialCharacters? = .yes)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AdditionalCustomerCommonData : Swift.Encodable {
  public var uniqueRequestId: Swift.String
  public var metadata: IDentitySDK.Metadata?
  public var ocrMetadata: IDentitySDK.OcrMetadata?
  public init(uniqueRequestId: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias ValidateIdAPICompletion = (Swift.Result<IDentitySDK.CustomerValidateIdResponse, Swift.Error>) -> Swift.Void
public typealias LiveFaceCheckAPICompletion = (Swift.Result<IDentitySDK.CustomerLiveCheckResponse, Swift.Error>) -> Swift.Void
public typealias ValidateIdMatchFaceAPICompletion = (Swift.Result<IDentitySDK.CustomerValidateIdFaceMatchResponse, Swift.Error>) -> Swift.Void
public typealias ValidateIdCustomerEnrollAPICompletion = (Swift.Result<IDentitySDK.CustomerEnrollResponse, Swift.Error>) -> Swift.Void
public typealias CustomerEnrollBiometricsAPICompletion = (Swift.Result<IDentitySDK.CustomerEnrollBiometricResponse, Swift.Error>) -> Swift.Void
public typealias CustomerVerificationAPICompletion = (Swift.Result<IDentitySDK.CustomerVerifyResponse, Swift.Error>) -> Swift.Void
public typealias CustomerIdentifyAPICompletion = (Swift.Result<IDentitySDK.CustomerIdentifyResponse, Swift.Error>) -> Swift.Void
extension IDentitySDK {
  public class func post(validateId request: IDentitySDK.CustomerValidateIdRequest, completion: @escaping IDentitySDK.ValidateIdAPICompletion)
  public class func post(liveFaceCheck request: IDentitySDK.CustomerLiveCheckRequest, completion: @escaping IDentitySDK.LiveFaceCheckAPICompletion)
  public class func post(validateIdMatchFace request: IDentitySDK.CustomerValidateIdFaceMatchRequest, completion: @escaping IDentitySDK.ValidateIdMatchFaceAPICompletion)
  public class func post(enroll request: IDentitySDK.CustomerEnrollRequest, completion: @escaping IDentitySDK.ValidateIdCustomerEnrollAPICompletion)
  public class func post(enrollBiometrics request: IDentitySDK.CustomerEnrollBiometricsRequest, completion: @escaping IDentitySDK.CustomerEnrollBiometricsAPICompletion)
  public class func post(verify request: IDentitySDK.CustomerVerifyRequest, completion: @escaping IDentitySDK.CustomerVerificationAPICompletion)
  public class func post(identify request: IDentitySDK.CustomerIdentifyRequest, completion: @escaping IDentitySDK.CustomerIdentifyAPICompletion)
}
public struct CustomerValidateIdFaceMatchDataResponse : Swift.Codable {
  public var extractedIdData: IDentitySDK.IdDataResponse?
  public var extractedPersonalData: IDentitySDK.PersonalCustomerValidateIdFaceMatchResponseData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum InitializationState : Swift.String {
  case ok
  case paused
  case downloading
  case downloaded
  case downloadingFromS3
  case downloadedFromS3
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum InitializationStage : Swift.String {
  case login
  case getXsltData
  case searchCompanyTemplateDetails
  case passiveFaceTrainingModelLabel
  case idCaptureTrainingModelLabel
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol InitializationDelegate : AnyObject {
  func updateInitialization(stage: IDentitySDK.InitializationStage, state: IDentitySDK.InitializationState)
}
public typealias ErrorCompletion = (Swift.Error?) -> Swift.Void
@_hasMissingDesignatedInitializers public class IDentitySDK {
  public struct LoginCredentials {
    public let loginId: Swift.String
    public let password: Swift.String
    public let merchantId: Swift.String
  }
  public static var loginCredentials: IDentitySDK.IDentitySDK.LoginCredentials? {
    get
  }
  weak public static var delegate: IDentitySDK.InitializationDelegate?
  public class func initializeSDK(loginId: Swift.String, password: Swift.String, merchantId: Swift.String, completion: @escaping IDentitySDK.ErrorCompletion)
  @objc deinit
}
extension IDentitySDK {
  public static var modelVersions: [Swift.String : Swift.String] {
    get
  }
}
public struct Metadata : Swift.Encodable {
  public struct Front : Swift.Encodable {
    public var operationTime: Swift.Int
    public init(operationTime: Swift.Int)
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Back : Swift.Encodable {
    public var operationTime: Swift.Int
    public init(operationTime: Swift.Int)
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Face : Swift.Encodable {
    public var avgLiveness: Swift.Float
    public var operationTime: Swift.Int
    public init(avgLiveness: Swift.Float, operationTime: Swift.Int)
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct FaceMatch : Swift.Encodable {
    public var matchScore: Swift.Float
    public var operationTime: Swift.Int
    public init(matchScore: Swift.Float, operationTime: Swift.Int)
    public func encode(to encoder: Swift.Encoder) throws
  }
  public var front: IDentitySDK.Metadata.Front?
  public var back: IDentitySDK.Metadata.Back?
  public var face: IDentitySDK.Metadata.Face?
  public var faceMatch: IDentitySDK.Metadata.FaceMatch?
  public init(front: IDentitySDK.Metadata.Front? = nil, back: IDentitySDK.Metadata.Back? = nil, face: IDentitySDK.Metadata.Face? = nil, faceMatch: IDentitySDK.Metadata.FaceMatch? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct BiometricIdentifyData : Swift.Encodable {
  public var selfie: Swift.String
  public var fingerPrintData: IDentitySDK.FingerPrintData?
  public var voiceData: Swift.String?
  public init(selfie: Swift.String, fingerPrintData: IDentitySDK.FingerPrintData? = nil, voiceData: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerValidateIdFaceMatchResponse : Swift.Codable {
  public var status: IDentitySDK.StatusData?
  public var resultData: IDentitySDK.FormDetailCommonResponseData?
  public var responseCustomerData: IDentitySDK.CustomerValidateIdFaceMatchDataResponse?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FingerPrintData : Swift.Encodable {
  public var fingerPrints: [IDentitySDK.FingerPrint]
  public var metadata: IDentitySDK.FingerPrintMetadata
  public init(fingerPrints: [IDentitySDK.FingerPrint], metadata: IDentitySDK.FingerPrintMetadata)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerLiveCheckResponse : Swift.Codable {
  public var status: IDentitySDK.StatusData?
  public var resultData: IDentitySDK.FormDetailLiveCheckResponseData?
  public var additionalData: IDentitySDK.AdditionalCustomerLiveCheckResponseData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CustomerIdentifyRequest : Swift.Encodable {
  public var securityData: IDentitySDK.SecurityData
  public var biometericData: IDentitySDK.BiometricIdentifyData
  public var additionalData: IDentitySDK.AdditionalCustomerCommonData
  public init(securityData: IDentitySDK.SecurityData, biometricData: IDentitySDK.BiometricIdentifyData, additionalData: IDentitySDK.AdditionalCustomerCommonData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerValidateIdRequest : Swift.Encodable {
  public var securityData: IDentitySDK.SecurityData
  public var customerData: IDentitySDK.CustomerValidateIdDataRequest
  public var additionalData: IDentitySDK.AdditionalCustomerWFlagCommonData
  public init(securityData: IDentitySDK.SecurityData, customerData: IDentitySDK.CustomerValidateIdDataRequest, additionalData: IDentitySDK.AdditionalCustomerWFlagCommonData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PersonalCustomerVerifyResponseData : Swift.Codable {
  public var uniqueNumber: Swift.String?
  public var name: Swift.String?
  public var email: Swift.String?
  public var dob: Swift.String?
  public var gender: Swift.String?
  public var addressLine1: Swift.String?
  public var addressLine2: Swift.String?
  public var city: Swift.String?
  public var country: Swift.String?
  public var phone: Swift.String?
  public var district: Swift.String?
  public var enrolledDate: Swift.String?
  public var enrolledFaceImage: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CustomerDataValidateIdResponse : Swift.Codable {
  public var extractedIdData: IDentitySDK.IdDataResponse?
  public var extractedPersonalData: IDentitySDK.PersonalCustomerValidateIdResponseData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDType : Swift.Codable {
  public var idTypeCode: Swift.String
  public var idTypeDesc: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDList {
  public static var idTypes: [IDentitySDK.IDType] {
    get
  }
}
public typealias BoolCompletion = (Swift.Bool) -> Swift.Void
public protocol CaptureSessionDelegate : AnyObject {
  func captured(image: UIKit.UIImage, isHighResolution: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers public class CaptureSession : ObjectiveC.NSObject {
  weak public var delegate: IDentitySDK.CaptureSessionDelegate?
  public var cameraPosition: AVFoundation.AVCaptureDevice.Position
  public var isHighResolution: Swift.Bool {
    get
    set(value)
  }
  @objc override dynamic public init()
  @objc deinit
}
extension CaptureSession : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
extension CaptureSession {
  public func authorizationStatus(completion: @escaping IDentitySDK.BoolCompletion)
}
public struct IDError : Swift.Error {
  public var localizedDescription: Swift.String
  public init(_ localizedDescription: Swift.String)
}
public struct PersonalCustomerCommonRequestData : Swift.Encodable {
  public enum Gender : Swift.String, Swift.Encodable {
    case female
    case male
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var uniqueNumber: Swift.String
  public var name: Swift.String?
  public var phone: Swift.String?
  public var email: Swift.String?
  public var dob: Swift.String?
  public var gender: IDentitySDK.PersonalCustomerCommonRequestData.Gender?
  public var addressLine1: Swift.String?
  public var addressLine2: Swift.String?
  public var city: Swift.String?
  public var district: Swift.String?
  public var country: Swift.String?
  public init(uniqueNumber: Swift.String, name: Swift.String? = nil, phone: Swift.String? = nil, email: Swift.String? = nil, dob: Swift.String? = nil, gender: IDentitySDK.PersonalCustomerCommonRequestData.Gender? = nil, addressLine1: Swift.String? = nil, addressLine2: Swift.String? = nil, city: Swift.String? = nil, district: Swift.String? = nil, country: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SignatureData : Swift.Encodable {
  public var signatureImage: Swift.String?
  public init(signatureImage: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AdditionalCustomerLiveCheckResponseData : Swift.Codable {
  public var liveFaceDetectionFlag: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CustomerIdentifyDataResponse : Swift.Codable {
  public var extractedPersonalData: IDentitySDK.PersonalCustomerIdentifyResponseData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PersonalCustomerValidateIdResponseData : Swift.Codable {
  public var uniqueNumber: Swift.String?
  public var name: Swift.String?
  public var email: Swift.String?
  public var dob: Swift.String?
  public var gender: Swift.String?
  public var addressLine1: Swift.String?
  public var addressLine2: Swift.String?
  public var city: Swift.String?
  public var country: Swift.String?
  public var lastName2: Swift.String?
  public var firstName: Swift.String?
  public var middleName: Swift.String?
  public var lastName: Swift.String?
  public var firstNameNonEng: Swift.String?
  public var lastNameNonEng: Swift.String?
  public var middleNameNonEng: Swift.String?
  public var addressNonEng: Swift.String?
  public var addressLine1NonEng: Swift.String?
  public var addressLine2NonEng: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Country : Swift.Codable {
  public var countryCode: Swift.String
  public var countryName: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CountryList {
  public static var countries: [IDentitySDK.Country] {
    get
  }
}
public struct AdditionalCustomerLiveCheckData : Swift.Encodable {
  public var uniqueRequestId: Swift.String
  public var metadata: IDentitySDK.Metadata?
  public var ocrMetadata: IDentitySDK.OcrMetadata?
  public init(uniqueRequestId: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct IdDataRequest : Swift.Encodable {
  public enum IdType : Swift.String, Swift.Encodable {
    case passport
    case driversLicense
    case photoId
    case nationalId
    case governmentMilitaryOrPoliceId
    case residenceCard
    case voterIdCard
    case workVisaOrPemit
    case unitedNationsRefugeeCard
    case other
    case notSpecified
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var idType: IDentitySDK.IdDataRequest.IdType
  public var idCountry: Swift.String
  public var idState: Swift.String?
  public var idImageFront: Swift.String
  public var idImageBack: Swift.String?
  public init(idType: IDentitySDK.IdDataRequest.IdType, idCountry: Swift.String, idState: Swift.String? = nil, idImageFront: Swift.String, idImageBack: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FormDetailValidateIdResponseData : Swift.Codable {
  public var uniqueRequestId: Swift.String?
  public var verificationResultId: Swift.Int?
  public var verificationResult: Swift.String?
  public var verificationResultCode: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CustomerEnrollDataRequest : Swift.Encodable {
  public var idData: IDentitySDK.IdDataRequest
  public var personalData: IDentitySDK.PersonalCustomerCommonRequestData
  public var biometericData: IDentitySDK.BiometricEnrollData
  public init(idData: IDentitySDK.IdDataRequest, personalData: IDentitySDK.PersonalCustomerCommonRequestData, biometricData: IDentitySDK.BiometricEnrollData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerEnrollRequest : Swift.Encodable {
  public var securityData: IDentitySDK.SecurityData
  public var customerData: IDentitySDK.CustomerEnrollDataRequest
  public var additionalData: IDentitySDK.AdditionalCustomerWFlagCommonData
  public var signature: IDentitySDK.SignatureData?
  public var employee: IDentitySDK.EmployeeData?
  public init(securityData: IDentitySDK.SecurityData, customerData: IDentitySDK.CustomerEnrollDataRequest, additionalData: IDentitySDK.AdditionalCustomerWFlagCommonData, signature: IDentitySDK.SignatureData? = nil, employee: IDentitySDK.EmployeeData? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct BiometricVerifyRequestData : Swift.Encodable {
  public var selfie: Swift.String
  public var fingerPrintData: IDentitySDK.FingerPrintData?
  public var voiceData: Swift.String?
  public init(selfie: Swift.String, fingerPrintData: IDentitySDK.FingerPrintData? = nil, voiceData: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FingerPrintMetadata : Swift.Encodable {
  public enum Format : Swift.String, Swift.Encodable {
    case jpeg
    case wsq
    case iso
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var format: IDentitySDK.FingerPrintMetadata.Format
  public var model: Swift.String?
  public var serialNumber: Swift.String?
  public var backgroundColor: Swift.String?
  public init(format: IDentitySDK.FingerPrintMetadata.Format, model: Swift.String? = nil, serialNumber: Swift.String? = nil, backgroundColor: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerIdentifyResponse : Swift.Codable {
  public var status: IDentitySDK.StatusData?
  public var resultData: IDentitySDK.FormDetailIdentifyResponseData?
  public var responseCustomerData: IDentitySDK.CustomerIdentifyDataResponse?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension CGRect {
  public func rotatedCCW(in size: CoreGraphics.CGSize) -> CoreGraphics.CGRect
  public func aspectFill(from size1: CoreGraphics.CGSize, to size2: CoreGraphics.CGSize) -> CoreGraphics.CGRect
}
public struct CustomerEnrollDataResponse : Swift.Codable {
  public var extractedIdData: IDentitySDK.IdDataResponse?
  public var extractedPersonalData: IDentitySDK.PersonalCustomerEnrollResponseData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PersonalCustomerValidateIdFaceMatchResponseData : Swift.Codable {
  public var uniqueNumber: Swift.String?
  public var name: Swift.String?
  public var email: Swift.String?
  public var dob: Swift.String?
  public var gender: Swift.String?
  public var addressLine1: Swift.String?
  public var addressLine2: Swift.String?
  public var city: Swift.String?
  public var country: Swift.String?
  public var lastName2: Swift.String?
  public var firstName: Swift.String?
  public var middleName: Swift.String?
  public var lastName: Swift.String?
  public var firstNameNonEng: Swift.String?
  public var lastNameNonEng: Swift.String?
  public var middleNameNonEng: Swift.String?
  public var addressNonEng: Swift.String?
  public var addressLine1NonEng: Swift.String?
  public var addressLine2NonEng: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct EmployeeData : Swift.Encodable {
  public var companyId: Swift.String?
  public init(companyId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PersonalCustomerVerifyData : Swift.Encodable {
  public var uniqueNumber: Swift.String
  public init(uniqueNumber: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SecurityData : Swift.Encodable {
  public var userName: Swift.String
  public var password: Swift.String
  public var merchantId: Swift.Int
  public init(userName: Swift.String, password: Swift.String, merchantId: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerVerifyDataResponse : Swift.Codable {
  public var extractedPersonalData: IDentitySDK.PersonalCustomerVerifyResponseData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FingerPrint : Swift.Encodable {
  public enum Position : Swift.String, Swift.Encodable {
    case rightIndexFinger
    case rightMiddleFinger
    case rightRingFinger
    case rightLittleFinger
    case rightThumb
    case leftIndexFinger
    case leftMiddleFinger
    case leftRingFinger
    case leftLittleFinger
    case leftThumb
    case leftFourFingers
    case rightFourFingers
    case twoThumbs
    case unknown
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var fpData: Swift.String
  public var fpPosition: IDentitySDK.FingerPrint.Position
  public var imageHashValue: Swift.String?
  public var nfiq: Swift.String?
  public init(fpData: Swift.String, fpPosition: IDentitySDK.FingerPrint.Position, imageHashValue: Swift.String? = nil, nfiq: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct MRZResult : Swift.Encodable {
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FormDetailIdentifyResponseData : Swift.Codable {
  public var uniqueRequestId: Swift.String?
  public var verificationResultId: Swift.Int?
  public var verificationResult: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol IDCaptureDelegate : AnyObject {
  func updated(state: IDentitySDK.IDCaptureState)
}
public enum IDCaptureState {
  case detectingBox
  case moveCloser
  case moveAway
  case alignRectangle
  case detectedBox
  case classifiedDocument(IDentitySDK.DetectedData)
  case success(IDentitySDK.DetectedData)
  case timedOut(IDentitySDK.DetectedData)
  case failed
}
public struct DetectedData {
  public enum DocumentSide {
    case front
    case back
    public static func == (a: IDentitySDK.DetectedData.DocumentSide, b: IDentitySDK.DetectedData.DocumentSide) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var documentLocation: CoreGraphics.CGRect
  public var faceLocation: CoreGraphics.CGRect?
  public var confidence: Swift.Float
  public var realnessScores: IDentitySDK.RealnessScores?
  public var type: Swift.String?
  public var sides: Swift.Int
  public var side: IDentitySDK.DetectedData.DocumentSide?
  public var shouldHavePhoto: Swift.Bool
  public var shouldHaveMrz: Swift.Bool
  public var shouldHaveBarcode: Swift.Bool {
    get
  }
  public var isPhotoPresent: Swift.Bool
  public var mrz: IDentitySDK.MRZResult?
  public var barcode: [Swift.String : Swift.String]?
  public var idType: Swift.String?
  public var country: Swift.String?
  public var state: Swift.String?
  public var barcodeType: Swift.String?
  public var image: UIKit.UIImage? {
    get
    set(value)
  }
  public var faceImage: UIKit.UIImage?
}
public struct SelectedData {
  public var idType: Swift.String
  public var country: Swift.String
  public var state: Swift.String?
  public init(idType: Swift.String, country: Swift.String, state: Swift.String? = nil)
}
public class IDCapture {
  public static var realnessThreshold: Swift.Float
  public static var frontDocumentConfidence: Swift.Float
  public static var backDocumentConfidence: Swift.Float
  public static var lowerWidthThresholdTolerance: Swift.Float
  public static var upperWidthThresholdTolerance: Swift.Float
  public static var faceMatchMax: Swift.Float
  public static var isDebugMode: Swift.Bool
  weak public var delegate: IDentitySDK.IDCaptureDelegate?
  public init(overlayFrame: CoreGraphics.CGRect)
  public func typeMismatch()
  public func retry()
  @objc deinit
}
extension IDCapture : IDentitySDK.CaptureSessionDelegate {
  public func captured(image: UIKit.UIImage, isHighResolution: Swift.Bool)
}
extension NSNotification.Name {
  public static var idCaptureDebugData: Foundation.Notification.Name
}
public struct CustomerLiveCheckRequest : Swift.Encodable {
  public var securityData: IDentitySDK.SecurityData
  public var customerData: IDentitySDK.CustomerLiveCheckDataRequest
  public var additionalData: IDentitySDK.AdditionalCustomerLiveCheckData
  public init(securityData: IDentitySDK.SecurityData, customerData: IDentitySDK.CustomerLiveCheckDataRequest, additionalData: IDentitySDK.AdditionalCustomerLiveCheckData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerValidateIdFaceMatchRequest : Swift.Encodable {
  public var securityData: IDentitySDK.SecurityData
  public var customerData: IDentitySDK.CustomerValidateIdFaceMatchDataRequest
  public var additionalData: IDentitySDK.AdditionalCustomerWFlagCommonData
  public init(securityData: IDentitySDK.SecurityData, customerData: IDentitySDK.CustomerValidateIdFaceMatchDataRequest, additionalData: IDentitySDK.AdditionalCustomerWFlagCommonData)
  public func encode(to encoder: Swift.Encoder) throws
}
public class QKMRZParser {
  public init(ocrCorrection: Swift.Bool = false)
  public func parse(mrzLines: [Swift.String]) -> IDentitySDK.QKMRZResult?
  public func parse(mrzString: Swift.String) -> IDentitySDK.QKMRZResult?
  @objc deinit
}
public struct CustomerEnrollResponse : Swift.Codable {
  public var status: IDentitySDK.StatusData?
  public var resultData: IDentitySDK.FormDetailCommonResponseData?
  public var responseCustomerData: IDentitySDK.CustomerEnrollDataResponse?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CustomerValidateIdDataRequest : Swift.Encodable {
  public var idData: IDentitySDK.IdDataRequest
  public var personalData: IDentitySDK.PersonalCustomerCommonRequestData1?
  public init(idData: IDentitySDK.IdDataRequest, personalData: IDentitySDK.PersonalCustomerCommonRequestData1? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerEnrollBiometricsRequest : Swift.Encodable {
  public var securityData: IDentitySDK.SecurityData
  public var customerData: IDentitySDK.CustomerEnrollBiometricDataRequest
  public var additionalData: IDentitySDK.AdditionalCustomerEnrollBiometricRequestData
  public init(securityData: IDentitySDK.SecurityData, customerData: IDentitySDK.CustomerEnrollBiometricDataRequest, additionalData: IDentitySDK.AdditionalCustomerEnrollBiometricRequestData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct StatusData : Swift.Codable {
  public var statusCode: Swift.String?
  public var statusMessage: Swift.String?
  public var errorData: Swift.String?
  public var requestId: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class XMLHashOptions {
  public var shouldProcessLazily: Swift.Bool
  public var shouldProcessNamespaces: Swift.Bool
  public var caseInsensitive: Swift.Bool
  public var encoding: Swift.String.Encoding
  public var userInfo: [Swift.CodingUserInfoKey : Any]
  public var detectParsingErrors: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class XMLHash {
  public class func config(_ configAction: (IDentitySDK.XMLHashOptions) -> Swift.Void) -> IDentitySDK.XMLHash
  public func parse(_ xml: Swift.String) -> IDentitySDK.XMLIndexer
  public func parse(_ data: Foundation.Data) -> IDentitySDK.XMLIndexer
  public class func parse(_ xml: Swift.String) -> IDentitySDK.XMLIndexer
  public class func parse(_ data: Foundation.Data) -> IDentitySDK.XMLIndexer
  public class func lazy(_ xml: Swift.String) -> IDentitySDK.XMLIndexer
  public class func lazy(_ data: Foundation.Data) -> IDentitySDK.XMLIndexer
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IndexOp {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IndexOps {
  @objc deinit
}
public struct ParsingError : Swift.Error {
  public let line: Swift.Int
  public let column: Swift.Int
}
public enum IndexingError : Swift.Error {
  case attribute(attr: Swift.String)
  case attributeValue(attr: Swift.String, value: Swift.String)
  case key(key: Swift.String)
  case index(idx: Swift.Int)
  case initialize(instance: Swift.AnyObject)
  case encoding
  case error
  @available(*, unavailable, renamed: "attribute(attr:)")
  public static func Attribute(attr: Swift.String) -> IDentitySDK.IndexingError
  @available(*, unavailable, renamed: "attributeValue(attr:value:)")
  public static func AttributeValue(attr: Swift.String, value: Swift.String) -> IDentitySDK.IndexingError
  @available(*, unavailable, renamed: "key(key:)")
  public static func Key(key: Swift.String) -> IDentitySDK.IndexingError
  @available(*, unavailable, renamed: "index(idx:)")
  public static func Index(idx: Swift.Int) -> IDentitySDK.IndexingError
  @available(*, unavailable, renamed: "initialize(instance:)")
  public static func Init(instance: Swift.AnyObject) -> IDentitySDK.IndexingError
  @available(*, unavailable, renamed: "error")
  public static var Error: IDentitySDK.IndexingError {
    get
  }
}
public enum XMLIndexer {
  case element(IDentitySDK.XMLElement)
  case list([IDentitySDK.XMLElement])
  case stream(IDentitySDK.IndexOps)
  case xmlError(IDentitySDK.IndexingError)
  case parsingError(IDentitySDK.ParsingError)
  @available(*, unavailable, renamed: "element(_:)")
  public static func Element(_: IDentitySDK.XMLElement) -> IDentitySDK.XMLIndexer
  @available(*, unavailable, renamed: "list(_:)")
  public static func List(_: [IDentitySDK.XMLElement]) -> IDentitySDK.XMLIndexer
  @available(*, unavailable, renamed: "stream(_:)")
  public static func Stream(_: IDentitySDK.IndexOps) -> IDentitySDK.XMLIndexer
  @available(*, unavailable, renamed: "xmlError(_:)")
  public static func XMLError(_: IDentitySDK.IndexingError) -> IDentitySDK.XMLIndexer
  @available(*, unavailable, renamed: "withAttribute(_:_:)")
  public static func withAttr(_ attr: Swift.String, _ value: Swift.String) throws -> IDentitySDK.XMLIndexer
  public var element: IDentitySDK.XMLElement? {
    get
  }
  public var all: [IDentitySDK.XMLIndexer] {
    get
  }
  public var children: [IDentitySDK.XMLIndexer] {
    get
  }
  @available(*, unavailable, renamed: "filterChildren(_:)")
  public func filter(_ included: (IDentitySDK.XMLElement, Swift.Int) -> Swift.Bool) -> IDentitySDK.XMLIndexer
  public func filterChildren(_ included: (IDentitySDK.XMLElement, Swift.Int) -> Swift.Bool) -> IDentitySDK.XMLIndexer
  public func filterAll(_ included: (IDentitySDK.XMLElement, Swift.Int) -> Swift.Bool) -> IDentitySDK.XMLIndexer
  public var userInfo: [Swift.CodingUserInfoKey : Any] {
    get
  }
  public func withAttribute(_ attr: Swift.String, _ value: Swift.String) throws -> IDentitySDK.XMLIndexer
  public init(_ rawObject: Swift.AnyObject) throws
  public init(_ elem: IDentitySDK.XMLElement)
  public func byKey(_ key: Swift.String) throws -> IDentitySDK.XMLIndexer
  public subscript(key: Swift.String) -> IDentitySDK.XMLIndexer {
    get
  }
  public func byIndex(_ index: Swift.Int) throws -> IDentitySDK.XMLIndexer
  public subscript(index: Swift.Int) -> IDentitySDK.XMLIndexer {
    get
  }
}
extension XMLIndexer : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension IndexingError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol XMLContent : Swift.CustomStringConvertible {
}
@_hasMissingDesignatedInitializers public class TextElement : IDentitySDK.XMLContent {
  final public let text: Swift.String
  @objc deinit
}
public struct XMLAttribute {
  public let name: Swift.String
  public let text: Swift.String
}
@_hasMissingDesignatedInitializers public class XMLElement : IDentitySDK.XMLContent {
  final public let name: Swift.String
  public var caseInsensitive: Swift.Bool {
    get
  }
  public var allAttributes: [Swift.String : IDentitySDK.XMLAttribute]
  public func attribute(by name: Swift.String) -> IDentitySDK.XMLAttribute?
  public var text: Swift.String {
    get
  }
  public var recursiveText: Swift.String {
    get
  }
  public var innerXML: Swift.String {
    get
  }
  public var children: [IDentitySDK.XMLContent]
  @objc deinit
}
extension TextElement : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension XMLAttribute : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension XMLElement : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension XMLHash {
  public typealias XMLElement = IDentitySDK.XMLHashXMLElement
}
public typealias XMLHashXMLElement = IDentitySDK.XMLElement
extension XMLIndexer {
  public func withAttribute<A, V>(_ attr: A, _ value: V) throws -> IDentitySDK.XMLIndexer where A : Swift.RawRepresentable, V : Swift.RawRepresentable, A.RawValue == Swift.String, V.RawValue == Swift.String
  public func byKey<K>(_ key: K) throws -> IDentitySDK.XMLIndexer where K : Swift.RawRepresentable, K.RawValue == Swift.String
  public subscript<K>(key: K) -> IDentitySDK.XMLIndexer where K : Swift.RawRepresentable, K.RawValue == Swift.String {
    get
  }
}
extension XMLElement {
  public func attribute<N>(by name: N) -> IDentitySDK.XMLAttribute? where N : Swift.RawRepresentable, N.RawValue == Swift.String
}
public struct FaceMatchResult {
  public var distance: Swift.Float
  public var isMatched: Swift.Bool
  public init(distance: Swift.Float, isMatched: Swift.Bool)
}
public class FaceMatchDetector {
  public init()
  public func faceMatch(selfieImage: UIKit.UIImage, idFaceImage: UIKit.UIImage) -> IDentitySDK.FaceMatchResult?
  @objc deinit
}
public protocol SelfieCaptureDelegate : AnyObject {
  func updated(state: IDentitySDK.SelfieCaptureState)
}
public enum SelfieCaptureState {
  case detectingFace
  case moveCloser
  case moveAway
  case alignFace
  case detectedIssue(Swift.String)
  case capturingFace
  case success(IDentitySDK.Selfie)
  case timedOut(IDentitySDK.Selfie)
}
public struct Selfie {
  public let image: UIKit.UIImage
  public let faceImage: UIKit.UIImage
  public let averageLiveness: Swift.Float
}
public class SelfieCapture {
  public static var minFaceWidth: Swift.Float
  public static var eyeOpenProbability: Swift.Float
  public static var minHeadEulerAngle: Swift.Float
  public static var maxHeadEulerAngle: Swift.Float
  public static var minRelativeNoseHeight: Swift.Float
  public static var maxRelativeNoseHeight: Swift.Float
  public static var labelsConfidenceThreshold: Swift.Float
  public static var faceMaskProbabilityThreshold: Swift.Float
  public static var liveFaceProbabilityThreshold: Swift.Float
  public static var isDebugMode: Swift.Bool
  weak public var delegate: IDentitySDK.SelfieCaptureDelegate?
  public init(overlayFrame: CoreGraphics.CGRect)
  public func retry()
  @objc deinit
}
extension SelfieCapture : IDentitySDK.CaptureSessionDelegate {
  public func captured(image: UIKit.UIImage, isHighResolution: Swift.Bool)
}
extension NSNotification.Name {
  public static var selfieCaptureDebugData: Foundation.Notification.Name
}
public struct CustomerValidateIdFaceMatchDataRequest : Swift.Encodable {
  public var idData: IDentitySDK.IdDataRequest
  public var personalData: IDentitySDK.PersonalCustomerCommonRequestData1?
  public var biometericData: IDentitySDK.BiometricValidateIdFaceMatchData
  public init(idData: IDentitySDK.IdDataRequest, personalData: IDentitySDK.PersonalCustomerCommonRequestData1? = nil, biometericData: IDentitySDK.BiometricValidateIdFaceMatchData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct RealnessScores {
  public let photocopyScore: Swift.Float
  public let realScore: Swift.Float
  public let screenScore: Swift.Float
}
public struct AdditionalCustomerEnrollBiometricRequestData : Swift.Encodable {
  public enum NeedImmediateResponse : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DeDuplicationRequired : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var uniqueRequestId: Swift.String
  public var needImmediateResponse: IDentitySDK.AdditionalCustomerEnrollBiometricRequestData.NeedImmediateResponse?
  public var deDuplicationRequired: IDentitySDK.AdditionalCustomerEnrollBiometricRequestData.DeDuplicationRequired?
  public var metadata: IDentitySDK.Metadata?
  public var ocrMetadata: IDentitySDK.OcrMetadata?
  public init(uniqueRequestId: Swift.String, needImmediateResponse: IDentitySDK.AdditionalCustomerEnrollBiometricRequestData.NeedImmediateResponse? = nil, deDuplicationRequired: IDentitySDK.AdditionalCustomerEnrollBiometricRequestData.DeDuplicationRequired? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PersonalCustomerIdentifyResponseData : Swift.Codable {
  public var uniqueNumber: Swift.String?
  public var name: Swift.String?
  public var email: Swift.String?
  public var dob: Swift.String?
  public var gender: Swift.String?
  public var addressLine1: Swift.String?
  public var addressLine2: Swift.String?
  public var city: Swift.String?
  public var country: Swift.String?
  public var phone: Swift.String?
  public var district: Swift.String?
  public var fingerprintUsedForVerification: Swift.String?
  public var enrolledDate: Swift.String?
  public var enrolledFaceImage: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct State : Swift.Codable {
  public var stateCode: Swift.String
  public var countryCode: Swift.String
  public var stateName: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct StateList {
  public static var states: [IDentitySDK.State] {
    get
  }
}
extension UserDefaults {
  public static var passiveFaceTrainingModelName: Swift.String? {
    get
  }
  public static var idCaptureTrainingModelName: Swift.String? {
    get
  }
}
public struct CustomerVerifyDataRequest : Swift.Encodable {
  public var personalData: IDentitySDK.PersonalCustomerVerifyData
  public var biometericData: IDentitySDK.BiometricVerifyRequestData
  public init(personalData: IDentitySDK.PersonalCustomerVerifyData, biometricData: IDentitySDK.BiometricVerifyRequestData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerEnrollBiometricResponse : Swift.Codable {
  public var status: IDentitySDK.StatusData?
  public var resultData: IDentitySDK.FormDetailEnrollBiometricsResponseData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CustomerVerifyRequest : Swift.Encodable {
  public var securityData: IDentitySDK.SecurityData
  public var customerData: IDentitySDK.CustomerVerifyDataRequest
  public var additionalData: IDentitySDK.AdditionalCustomerCommonData
  public init(securityData: IDentitySDK.SecurityData, customerData: IDentitySDK.CustomerVerifyDataRequest, additionalData: IDentitySDK.AdditionalCustomerCommonData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FormDetailLiveCheckResponseData : Swift.Codable {
  public var uniqueRequestId: Swift.String?
  public var verificationResultId: Swift.Int?
  public var verificationResult: Swift.String?
  public var verificationResultCode: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FormDetailCommonResponseData : Swift.Codable {
  public var uniqueRequestId: Swift.String?
  public var verificationResultId: Swift.Int?
  public var verificationResult: Swift.String?
  public var verificationResultCode: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PersonalCustomerEnrollResponseData : Swift.Codable {
  public var uniqueNumber: Swift.String?
  public var name: Swift.String?
  public var email: Swift.String?
  public var dob: Swift.String?
  public var gender: Swift.String?
  public var addressLine1: Swift.String?
  public var addressLine2: Swift.String?
  public var city: Swift.String?
  public var country: Swift.String?
  public var lastName2: Swift.String?
  public var firstName: Swift.String?
  public var middleName: Swift.String?
  public var lastName: Swift.String?
  public var firstNameNonEng: Swift.String?
  public var lastNameNonEng: Swift.String?
  public var middleNameNonEng: Swift.String?
  public var addressNonEng: Swift.String?
  public var addressLine1NonEng: Swift.String?
  public var addressLine2NonEng: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BiometricEnrollBiometricRequestData : Swift.Encodable {
  public var selfie: Swift.String?
  public var fingerPrintData: IDentitySDK.FingerPrintData?
  public var voiceData: Swift.String?
  public init(selfie: Swift.String? = nil, fingerPrintData: IDentitySDK.FingerPrintData? = nil, voiceData: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerVerifyResponse : Swift.Codable {
  public var status: IDentitySDK.StatusData?
  public var resultData: IDentitySDK.FormDetailVerifyResponseData?
  public var responseCustomerVerifyData: IDentitySDK.CustomerVerifyDataResponse?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FormDetailEnrollBiometricsResponseData : Swift.Codable {
  public var uniqueRequestId: Swift.String?
  public var verificationResultId: Swift.Int?
  public var verificationResult: Swift.String?
  public var verificationResultCode: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension IDentitySDK {
  public static var templateURL: Swift.String {
    get
    set(newValue)
  }
  public static var modelURL: Swift.String {
    get
    set(newValue)
  }
  public static var apiBaseURL: Swift.String {
    get
    set(newValue)
  }
}
public struct CustomerLiveCheckDataRequest : Swift.Encodable {
  public var biometericData: IDentitySDK.BiometricLiveCheckData
  public init(biometericData: IDentitySDK.BiometricLiveCheckData)
  public func encode(to encoder: Swift.Encoder) throws
}
public enum CameraPosition {
  case back
  case front
  public static func == (a: IDentitySDK.CameraPosition, b: IDentitySDK.CameraPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class CaptureSessionViewController : UIKit.UIViewController {
  final public let captureSession: IDentitySDK.CaptureSession
  open var cameraPosition: IDentitySDK.CameraPosition {
    get
  }
  public var videoPreviewLayer: AVFoundation.AVCaptureVideoPreviewLayer? {
    get
  }
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  open func captureSessionDidStartRunning()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct BiometricEnrollData : Swift.Encodable {
  public var selfie: Swift.String
  public var fingerPrintData: IDentitySDK.FingerPrintData?
  public var voiceData: Swift.String?
  public init(selfie: Swift.String, fingerPrintData: IDentitySDK.FingerPrintData? = nil, voiceData: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FormDetailVerifyResponseData : Swift.Codable {
  public var uniqueRequestId: Swift.String?
  public var verificationResultId: Swift.Int?
  public var verificationResult: Swift.String?
  public var verificationResultCode: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension CALayer {
  public func draw(rect: CoreGraphics.CGRect, color: UIKit.UIColor)
  public func removeShapeSublayers()
}
extension Dictionary {
  public static func += (lhs: inout Swift.Dictionary<Key, Value>, rhs: Swift.Dictionary<Key, Value>)
}
public struct PersonalCustomerCommonRequestData1 : Swift.Encodable {
  public enum Gender : Swift.String, Swift.Encodable {
    case female
    case male
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var uniqueNumber: Swift.String?
  public var name: Swift.String?
  public var phone: Swift.String?
  public var email: Swift.String?
  public var dob: Swift.String?
  public var gender: IDentitySDK.PersonalCustomerCommonRequestData1.Gender?
  public var addressLine1: Swift.String?
  public var addressLine2: Swift.String?
  public var city: Swift.String?
  public var district: Swift.String?
  public var country: Swift.String?
  public init(uniqueNumber: Swift.String? = nil, name: Swift.String? = nil, phone: Swift.String? = nil, email: Swift.String? = nil, dob: Swift.String? = nil, gender: IDentitySDK.PersonalCustomerCommonRequestData1.Gender? = nil, addressLine1: Swift.String? = nil, addressLine2: Swift.String? = nil, city: Swift.String? = nil, district: Swift.String? = nil, country: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct BiometricValidateIdFaceMatchData : Swift.Encodable {
  public var selfie: Swift.String
  public init(selfie: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerEnrollBiometricDataRequest : Swift.Encodable {
  public var personalData: IDentitySDK.PersonalCustomerCommonRequestData
  public var biometericData: IDentitySDK.BiometricEnrollBiometricRequestData
  public init(personalData: IDentitySDK.PersonalCustomerCommonRequestData, biometricData: IDentitySDK.BiometricEnrollBiometricRequestData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct OcrMetadata : Swift.Encodable {
  public var idData: [Swift.String : Swift.String]
  public init(idData: [Swift.String : Swift.String])
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerValidateIdResponse : Swift.Codable {
  public var status: IDentitySDK.StatusData?
  public var resultData: IDentitySDK.FormDetailValidateIdResponseData?
  public var responseCustomerData: IDentitySDK.CustomerDataValidateIdResponse?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IdDataResponse : Swift.Codable {
  public var idType: Swift.String?
  public var idState: Swift.String?
  public var idCountry: Swift.String?
  public var idNumber: Swift.String?
  public var idNumber1: Swift.String?
  public var idNumber2: Swift.String?
  public var idNumber3: Swift.String?
  public var idDateOfBirth: Swift.String?
  public var idDateOfBirthFormatted: Swift.String?
  public var idExpirationDate: Swift.String?
  public var idExpirationDateFormatted: Swift.String?
  public var idIssueDate: Swift.String?
  public var idIssueCountry: Swift.String?
  public var mrzData: Swift.String?
  public var idImageFront: Swift.String?
  public var idImageBack: Swift.String?
  public var idProcessImageFront: Swift.String?
  public var idProcessImageBack: Swift.String?
  public var idNumberNonEng: Swift.String?
  public var idNumber2NonEng: Swift.String?
  public var idDateOfBirthNonEng: Swift.String?
  public var idExpirationDateNonEng: Swift.String?
  public var idIssueDateNonEng: Swift.String?
  public var barcodeDataParsed: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
